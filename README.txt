# GranPescaPokemon -TP1 Algoritmos y Programaci√≥n II

_Trabajo pr√°ctico N¬∫1 de Algoritmos y Programaci√≥n II, C√°tedra Mendez, Facultad de Ingenier√≠a de la Universidad de Buenos Aires._


## Introducci√≥n üöÄ 

En el trabajo presentado 
 Una breve introducci√≥n sobre el funcionamiento del trabajo presentado.

## Modo de Uso üìù

_Una explicaci√≥n de como compilarlo (l√≠nea de compilaci√≥n) y como ejecutarlo (l√≠nea de ejecuci√≥n)._

+---------------------------------------------------------------+
| $ gcc *.c -Wall -Werror -Wconversion -std=c99 -o evento_pesca |
| $ gcc -g main.c evento_pesca.o -o main                        |
| $ ./main                                                      |
+---------------------------------------------------------------+

## Contruido con... ‚öô

    1. Punteros.



    2. Aritm√©tica de punteros.



    3. Punteros a funciones.



    4. Malloc y Realloc.


## Enunciado üë©‚Äçüíª

La l√≠der de gimnasio Misty organiz√≥ un evento de pesca que se llevar√° a cabo en su acuario, ubicado en Ciudad Celeste.
Para ello necesitar√° muchos y muy variados pok√©mon de tipo agua. El lugar indicado en Kanto para obtener a todos
estos pok√©mon es el arrecife que rodea a las Islas Espuma.

Para realizarlo, te pide que la ayudes a trasladar los pok√©mon seleccionados desde el arrecife a su acuario, donde ser√°
realizado el evento.

A Misty le preocupa perjudicar la poblaci√≥n de las especies m√°s vulnerables, es por ello que te pide realizar una simulaci√≥n
del arrecife, pudiendo ver como quedar√° su estado dependiendo de qu√© especies se elijan para el evento.
Las funcionalidades que se deben implementar se detallan a continuaci√≥n:

    1) Funci√≥n que dado un archivo carga los pok√©mon que viven en el arrecife
       reservando la memoria necesaria para el mismo. Se debe intentar leer la mayor
       cantidad posible de registros del archivo. Al encontrar el primer registro
       err√≥neo (o al llegar al final del archivo) se deben finalizar la lectura y
       crear el arrecife con los pok√©mon le√≠dos exitosamente. En caso de no
       encontrar ning√∫n registro con el formato correcto , se debe devolver error.
       Devuelve un puntero a un arrecife v√°lido o NULL en caso de error.

    arrecife_t* crear_arrecife(char* ruta_archivo);


    2) Funci√≥n que crea un acuario vac√≠o reservando la memoria necesaria para el mismo.
       Devuelve el acuario o NULL en caso de error.

    acuario_t* crear_acuario();


    3) Funci√≥n que deber√° sacar del arrecife a todos los pok√©mon que satisfagan la
       condici√≥n dada por el puntero a funci√≥n (que devuelvan true) y trasladarlos
       hacia el acuario. El par√°metro cant_seleccion especifica la cantidad m√°xima
       de pok√©mon que ser√°n trasladados. En caso de que haya menos pok√©mon trasladables en el
       arrecife que los pedidos , no se deber√° mover ninguno para conservar los pocos existentes.
       El vector de pokemones del arrecife quedar√° solo con aquellos que no fueron
       trasladados (su tama√±o se ajustar√° luego de cada traslado).
       El vector de pokemones del acuari√≥ quedar√° con aquellos que fueron
       trasladados esta vez m√°s los que ya hab√≠a en el
       acuario (su tama√±o se ajustar√° luego de cada traslado).
       Devuelve -1 en caso de error o 0 en caso contrario.

    int trasladar_pokemon(arrecife_t* arrecife , acuario_t* acuario , bool (*seleccionar_pokemon) (pokemon_t*), int cant_seleccion);


    4) Procedimiento que dado un arrecife deber√° mostrar por pantalla a todos los pokemon que contiene.

    void censar_arrecife(arrecife_t* arrecife , void (*mostrar_pokemon)(pokemon_t*));


    5) Funci√≥n que dado un acuario guarda en un archivo de texto a los pokemones que contiene.
       Devuelve 0 si se realizo con √©xito o -1 si hubo algun problema para guardar el archivo.

    int guardar_datos_acuario(acuario_t* acuario , const char* nombre_archivo);


    6) Libera la memoria que fue reservada para el acuario.
    
    void liberar_acuario(acuario_t* acuario);


    7) Libera la memoria que fue reservada para el arrecife.

    void liberar_arrecife(arrecife_t* arrecife);


A su vez, se cuenta con los siguientes registros a utilizar en el presente trabajo:
+----------------------------------+
| typedef struct pokemon{          |
|     char especie[MAX_ESPECIE];   |
|     int velocidad;               |
|     int peso;                    |
|     char color[MAX_COLOR];       |
| } pokemon_t;                     |
| typedef struct acuario{          |
|     pokemon_t* pokemon;          |
|     int cantidad_pokemon;        |
| } acuario_t;                     |
|                                  |
|  typedef struct arrecife{        |
|     pokemon_t* pokemon;          |
|     int cantidad_pokemon;        |
| } arrecife_t;                    |
+----------------------------------+

Los pok√©mon pertenecientes al arrecife se encontrar√°n en el archivo arrecife.txt cuya ruta llega como par√°metro.
El archivo tendr√° la siguiente informaci√≥n:
    | especie;velocidad;peso;color

Los pok√©mon que est√©n registrados en el acuario de Misty ser√°n guardados en un archivo acuario.txt con el siguiente
formato:
    | especie;velocidad;peso;color


